use std::collections::HashMap;

use super::State;

/// 指定した動きの逆の動きを計算する。
pub fn calc_prime_move(mv: &State) -> State {
    let solved = State::new();

    let mut state = &solved * mv;
    let mut prev = state.clone();

    while solved != state {
        prev = state;
        state = &prev * mv;
    }

    prev
}

/// 基本的な動作が入った動きの辞書をつくる。
/// 基本的な動きとは、
/// x, y, z
/// U, D, L, R, F, B
/// M, E, S
/// u(Uw), d(Dw), l(Lw), r(Rw), f(Fw), b(Bw)
/// と、その逆動作(例: U')とその動作を２回続けた動作(例: U2)。
pub fn new() -> HashMap<String, State> {
    let mut moves = HashMap::new();

    moves.insert(String::from("x"), State {
        cc: [1, 3, 2, 4, 0, 5],
        cp: [3, 2, 6, 7, 0, 1, 5, 4],
        co: [2, 1, 2, 1, 1, 2, 1, 2],
        ep: [7, 5, 9, 11, 6, 2, 10, 3, 4, 1, 8, 0],
        eo: [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0],
    });

    moves.insert(String::from("x2"), State {
        cc: [3, 4, 2, 0, 1, 5],
        cp: [7, 6, 5, 4, 3, 2, 1, 0],
        co: [0; 8],
        ep: [3, 2, 1, 0, 10, 9, 8, 11, 6, 5, 4, 7],
        eo: [0; 12],
    });

    moves.insert(String::from("x'"), State {
        cc: [4, 0, 2, 1, 3, 5],
        cp: [4, 5, 1, 0, 7, 6, 2, 3],
        co: [2, 1, 2, 1, 1, 2, 1, 2],
        ep: [11, 9, 5, 7, 8, 1, 4, 0, 10, 2, 6, 3],
        eo: [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0],
    });

    moves.insert(String::from("y"), State {
        cc: [0, 2, 4, 3, 5, 1],
        cp: [3, 0, 1, 2, 7, 4, 5, 6],
        co: [0; 8],
        ep: [3, 0, 1, 2, 7, 4, 5, 6, 11, 8, 9, 10],
        eo: [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    });

    moves.insert(String::from("y2"), State {
        cc: [0, 4, 5, 3, 1, 2],
        cp: [2, 3, 0, 1, 6, 7, 4, 5],
        co: [0; 8],
        ep: [2, 3, 0, 1, 6, 7, 4, 5, 10, 11, 8, 9],
        eo: [0; 12],
    });

    moves.insert(String::from("y'"), State {
        cc: [0, 5, 1, 3, 2, 4],
        cp: [1, 2, 3, 0, 5, 6, 7, 4],
        co: [0; 8],
        ep: [1, 2, 3, 0, 5, 6, 7, 4, 9, 10, 11, 8],
        eo: [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    });

    moves.insert(String::from("z"), State {
        cc: [5, 1, 0, 2, 4, 3],
        cp: [4, 0, 3, 7, 5, 1, 2, 6],
        co: [1, 2, 1, 2, 2, 1, 2, 1],
        ep: [8, 4, 6, 10, 0, 7, 3, 11, 1, 5, 2, 9],
        eo: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    });

    moves.insert(String::from("z2"), State {
        cc: [3, 1, 5, 0, 4, 2],
        cp: [5, 4, 7, 6, 1, 0, 3, 2],
        co: [0; 8],
        ep: [1, 0, 3, 2, 8, 11, 10, 9, 4, 7, 6, 5],
        eo: [0; 12],
    });

    moves.insert(String::from("z'"), State {
        cc: [2, 1, 3, 5, 4, 0],
        cp: [1, 5, 6, 2, 0, 4, 7, 3],
        co: [1, 2, 1, 2, 2, 1, 2, 1],
        ep: [4, 8, 10, 6, 1, 9, 2, 5, 0, 11, 3, 7],
        eo: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    });

    moves.insert(String::from("U"), State {
        cc: [0, 1, 2, 3, 4, 5],
        cp: [3, 0, 1, 2, 4, 5, 6, 7],
        co: [0; 8],
        ep: [0, 1, 2, 3, 7, 4, 5, 6, 8, 9, 10, 11],
        eo: [0; 12],
    });

    moves.insert(String::from("U2"), State {
        cc: [0, 1, 2, 3, 4, 5],
        cp: [2, 3, 0, 1, 4, 5, 6, 7],
        co: [0; 8],
        ep: [0, 1, 2, 3, 6, 7, 4, 5, 8, 9, 10, 11],
        eo: [0; 12],
    });

    moves.insert(String::from("U'"), State {
        cc: [0, 1, 2, 3, 4, 5],
        cp: [1, 2, 3, 0, 4, 5, 6, 7],
        co: [0; 8],
        ep: [0, 1, 2, 3, 5, 6, 7, 4, 8, 9, 10, 11],
        eo: [0; 12],
    });

    moves.insert(String::from("D"), State {
        cc: [0, 1, 2, 3, 4, 5],
        cp: [0, 1, 2, 3, 5, 6, 7, 4],
        co: [0; 8],
        ep: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 8],
        eo: [0; 12],
    });

    moves.insert(String::from("D2"), State {
        cc: [0, 1, 2, 3, 4, 5],
        cp: [0, 1, 2, 3, 6, 7, 4, 5],
        co: [0; 8],
        ep: [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 8, 9],
        eo: [0; 12],
    });

    moves.insert(String::from("D'"), State {
        cc: [0, 1, 2, 3, 4, 5],
        cp: [0, 1, 2, 3, 7, 4, 5, 6],
        co: [0; 8],
        ep: [0, 1, 2, 3, 4, 5, 6, 7, 11, 8, 9, 10],
        eo: [0; 12],
    });

    moves.insert(String::from("L"), State {
        cc: [0, 1, 2, 3, 4, 5],
        cp: [4, 1, 2, 0, 7, 5, 6, 3],
        co: [2, 0, 0, 1, 1, 0, 0, 2],
        ep: [11, 1, 2, 7, 4, 5, 6, 0, 8, 9, 10, 3],
        eo: [0; 12],
    });

    moves.insert(String::from("L2"), State {
        cc: [0, 1, 2, 3, 4, 5],
        cp: [7, 1, 2, 4, 3, 5, 6, 0],
        co: [0; 8],
        ep: [3, 1, 2, 0, 4, 5, 6, 11, 8, 9, 10, 7],
        eo: [0; 12],
    });

    moves.insert(String::from("L'"), State {
        cc: [0, 1, 2, 3, 4, 5],
        cp: [3, 1, 2, 7, 0, 5, 6, 4],
        co: [2, 0, 0, 1, 1, 0, 0, 2],
        ep: [7, 1, 2, 11, 4, 5, 6, 3, 8, 9, 10, 0],
        eo: [0; 12],
    });

    moves.insert(String::from("R"), State {
        cc: [0, 1, 2, 3, 4, 5],
        cp: [0, 2, 6, 3, 4, 1, 5, 7],
        co: [0, 1, 2, 0, 0, 2, 1, 0],
        ep: [0, 5, 9, 3, 4, 2, 6, 7, 8, 1, 10, 11],
        eo: [0; 12],
    });

    moves.insert(String::from("R2"), State {
        cc: [0, 1, 2, 3, 4, 5],
        cp: [0, 6, 5, 3, 4, 2, 1, 7],
        co: [0; 8],
        ep: [0, 2, 1, 3, 4, 9, 6, 7, 8, 5, 10, 11],
        eo: [0; 12],
    });

    moves.insert(String::from("R'"), State {
        cc: [0, 1, 2, 3, 4, 5],
        cp: [0, 5, 1, 3, 4, 6, 2, 7],
        co: [0, 1, 2, 0, 0, 2, 1, 0],
        ep: [0, 9, 5, 3, 4, 1, 6, 7, 8, 2, 10, 11],
        eo: [0; 12],
    });

    moves.insert(String::from("F"), State {
        cc: [0, 1, 2, 3, 4, 5],
        cp: [0, 1, 3, 7, 4, 5, 2, 6],
        co: [0, 0, 1, 2, 0, 0, 2, 1],
        ep: [0, 1, 6, 10, 4, 5, 3, 7, 8, 9, 2, 11],
        eo: [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0],
    });

    moves.insert(String::from("F2"), State {
        cc: [0, 1, 2, 3, 4, 5],
        cp: [0, 1, 7, 6, 4, 5, 3, 2],
        co: [0; 8],
        ep: [0, 1, 3, 2, 4, 5, 10, 7, 8, 9, 6, 11],
        eo: [0; 12],
    });

    moves.insert(String::from("F'"), State {
        cc: [0, 1, 2, 3, 4, 5],
        cp: [0, 1, 6, 2, 4, 5, 7, 3],
        co: [0, 0, 1, 2, 0, 0, 2, 1],
        ep: [0, 1, 10, 6, 4, 5, 2, 7, 8, 9, 3, 11],
        eo: [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0],
    });

    moves.insert(String::from("B"), State {
        cc: [0, 1, 2, 3, 4, 5],
        cp: [1, 5, 2, 3, 0, 4, 6, 7],
        co: [1, 2, 0, 0, 2, 1, 0, 0],
        ep: [4, 8, 2, 3, 1, 5, 6, 7, 0, 9, 10, 11],
        eo: [1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
    });

    moves.insert(String::from("B2"), State {
        cc: [0, 1, 2, 3, 4, 5],
        cp: [5, 4, 2, 3, 1, 0, 6, 7],
        co: [0; 8],
        ep: [1, 0, 2, 3, 8, 5, 6, 7, 4, 9, 10, 11],
        eo: [0; 12],
    });

    moves.insert(String::from("B'"), State {
        cc: [0, 1, 2, 3, 4, 5],
        cp: [4, 0, 2, 3, 5, 1, 6, 7],
        co: [1, 2, 0, 0, 2, 1, 0, 0],
        ep: [8, 4, 2, 3, 0, 5, 6, 7, 1, 9, 10, 11],
        eo: [1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
    });

    moves.insert(String::from("M"), State {
        cc: [4, 0, 2, 1, 3, 5],
        cp: [0, 1, 2, 3, 4, 5, 6, 7],
        co: [0; 8],
        ep: [0, 1, 2, 3, 8, 5, 4, 7, 10, 9, 6, 11],
        eo: [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0],
    });

    moves.insert(String::from("M2"), State {
        cc: [3, 4, 2, 0, 1, 5],
        cp: [0, 1, 2, 3, 4, 5, 6, 7],
        co: [0; 8],
        ep: [0, 1, 2, 3, 10, 5, 8, 7, 6, 9, 4, 11],
        eo: [0; 12],
    });

    moves.insert(String::from("M'"), State {
        cc: [1, 3, 2, 4, 0, 5],
        cp: [0, 1, 2, 3, 4, 5, 6, 7],
        co: [0; 8],
        ep: [0, 1, 2, 3, 6, 5, 10, 7, 4, 9, 8, 11],
        eo: [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0],
    });

    moves.insert(String::from("E"), State {
        cc: [0, 5, 1, 3, 2, 4],
        cp: [0, 1, 2, 3, 4, 5, 6, 7],
        co: [0; 8],
        ep: [1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11],
        eo: [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    });

    moves.insert(String::from("E2"), State {
        cc: [0, 4, 5, 3, 1, 2],
        cp: [0, 1, 2, 3, 4, 5, 6, 7],
        co: [0; 8],
        ep: [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11],
        eo: [0; 12],
    });

    moves.insert(String::from("E'"), State {
        cc: [0, 2, 4, 3, 5, 1],
        cp: [0, 1, 2, 3, 4, 5, 6, 7],
        co: [0; 8],
        ep: [3, 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11],
        eo: [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    });

    moves.insert(String::from("S"), State {
        cc: [5, 1, 0, 2, 4, 3],
        cp: [0, 1, 2, 3, 4, 5, 6, 7],
        co: [0; 8],
        ep: [0, 1, 2, 3, 4, 7, 6, 11, 8, 5, 10, 9],
        eo: [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1],
    });

    moves.insert(String::from("S2"), State {
        cc: [3, 1, 5, 0, 4, 2],
        cp: [0, 1, 2, 3, 4, 5, 6, 7],
        co: [0; 8],
        ep: [0, 1, 2, 3, 4, 11, 6, 9, 8, 7, 10, 5],
        eo: [0; 12],
    });

    moves.insert(String::from("S'"), State {
        cc: [2, 1, 3, 5, 4, 0],
        cp: [0, 1, 2, 3, 4, 5, 6, 7],
        co: [0; 8],
        ep: [0, 1, 2, 3, 4, 9, 6, 5, 8, 11, 10, 7],
        eo: [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1],
    });

    moves.insert(String::from("u"), State {
        cc: [0, 2, 4, 3, 5, 1],
        cp: [3, 0, 1, 2, 4, 5, 6, 7],
        co: [0; 8],
        ep: [3, 0, 1, 2, 7, 4, 5, 6, 8, 9, 10, 11],
        eo: [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    });

    moves.insert(String::from("u2"), State {
        cc: [0, 4, 5, 3, 1, 2],
        cp: [2, 3, 0, 1, 4, 5, 6, 7],
        co: [0; 8],
        ep: [2, 3, 0, 1, 6, 7, 4, 5, 8, 9, 10, 11],
        eo: [0; 12],
    });

    moves.insert(String::from("u'"), State {
        cc: [0, 5, 1, 3, 2, 4],
        cp: [1, 2, 3, 0, 4, 5, 6, 7],
        co: [0; 8],
        ep: [1, 2, 3, 0, 5, 6, 7, 4, 8, 9, 10, 11],
        eo: [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    });

    moves.insert(String::from("Uw"), State {
        cc: [0, 2, 4, 3, 5, 1],
        cp: [3, 0, 1, 2, 4, 5, 6, 7],
        co: [0; 8],
        ep: [3, 0, 1, 2, 7, 4, 5, 6, 8, 9, 10, 11],
        eo: [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    });

    moves.insert(String::from("Uw2"), State {
        cc: [0, 4, 5, 3, 1, 2],
        cp: [2, 3, 0, 1, 4, 5, 6, 7],
        co: [0; 8],
        ep: [2, 3, 0, 1, 6, 7, 4, 5, 8, 9, 10, 11],
        eo: [0; 12],
    });

    moves.insert(String::from("Uw'"), State {
        cc: [0, 5, 1, 3, 2, 4],
        cp: [1, 2, 3, 0, 4, 5, 6, 7],
        co: [0; 8],
        ep: [1, 2, 3, 0, 5, 6, 7, 4, 8, 9, 10, 11],
        eo: [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    });

    moves.insert(String::from("d"), State {
        cc: [0, 5, 1, 3, 2, 4],
        cp: [0, 1, 2, 3, 5, 6, 7, 4],
        co: [0; 8],
        ep: [1, 2, 3, 0, 4, 5, 6, 7, 9, 10, 11, 8],
        eo: [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    });

    moves.insert(String::from("d2"), State {
        cc: [0, 4, 5, 3, 1, 2],
        cp: [0, 1, 2, 3, 6, 7, 4, 5],
        co: [0; 8],
        ep: [2, 3, 0, 1, 4, 5, 6, 7, 10, 11, 8, 9],
        eo: [0; 12],
    });

    moves.insert(String::from("d'"), State {
        cc: [0, 2, 4, 3, 5, 1],
        cp: [0, 1, 2, 3, 7, 4, 5, 6],
        co: [0; 8],
        ep: [3, 0, 1, 2, 4, 5, 6, 7, 11, 8, 9, 10],
        eo: [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    });

    moves.insert(String::from("Dw"), State {
        cc: [0, 5, 1, 3, 2, 4],
        cp: [0, 1, 2, 3, 5, 6, 7, 4],
        co: [0; 8],
        ep: [1, 2, 3, 0, 4, 5, 6, 7, 9, 10, 11, 8],
        eo: [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    });

    moves.insert(String::from("Dw2"), State {
        cc: [0, 4, 5, 3, 1, 2],
        cp: [0, 1, 2, 3, 6, 7, 4, 5],
        co: [0; 8],
        ep: [2, 3, 0, 1, 4, 5, 6, 7, 10, 11, 8, 9],
        eo: [0; 12],
    });

    moves.insert(String::from("Dw'"), State {
        cc: [0, 2, 4, 3, 5, 1],
        cp: [0, 1, 2, 3, 7, 4, 5, 6],
        co: [0; 8],
        ep: [3, 0, 1, 2, 4, 5, 6, 7, 11, 8, 9, 10],
        eo: [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    });

    moves.insert(String::from("l"), State {
        cc: [4, 0, 2, 1, 3, 5],
        cp: [4, 1, 2, 0, 7, 5, 6, 3],
        co: [2, 0, 0, 1, 1, 0, 0, 2],
        ep: [11, 1, 2, 7, 8, 5, 4, 0, 10, 9, 6, 3],
        eo: [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0],
    });

    moves.insert(String::from("l2"), State {
        cc: [3, 4, 2, 0, 1, 5],
        cp: [7, 1, 2, 4, 3, 5, 6, 0],
        co: [0; 8],
        ep: [3, 1, 2, 0, 10, 5, 8, 11, 6, 9, 4, 7],
        eo: [0; 12],
    });

    moves.insert(String::from("l'"), State {
        cc: [1, 3, 2, 4, 0, 5],
        cp: [3, 1, 2, 7, 0, 5, 6, 4],
        co: [2, 0, 0, 1, 1, 0, 0, 2],
        ep: [7, 1, 2, 11, 6, 5, 10, 3, 4, 9, 8, 0],
        eo: [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0],
    });

    moves.insert(String::from("Lw"), State {
        cc: [4, 0, 2, 1, 3, 5],
        cp: [4, 1, 2, 0, 7, 5, 6, 3],
        co: [2, 0, 0, 1, 1, 0, 0, 2],
        ep: [11, 1, 2, 7, 8, 5, 4, 0, 10, 9, 6, 3],
        eo: [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0],
    });

    moves.insert(String::from("Lw2"), State {
        cc: [3, 4, 2, 0, 1, 5],
        cp: [7, 1, 2, 4, 3, 5, 6, 0],
        co: [0; 8],
        ep: [3, 1, 2, 0, 10, 5, 8, 11, 6, 9, 4, 7],
        eo: [0; 12],
    });

    moves.insert(String::from("Lw'"), State {
        cc: [1, 3, 2, 4, 0, 5],
        cp: [3, 1, 2, 7, 0, 5, 6, 4],
        co: [2, 0, 0, 1, 1, 0, 0, 2],
        ep: [7, 1, 2, 11, 6, 5, 10, 3, 4, 9, 8, 0],
        eo: [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0],
    });

    moves.insert(String::from("r"), State {
        cc: [1, 3, 2, 4, 0, 5],
        cp: [0, 2, 6, 3, 4, 1, 5, 7],
        co: [0, 1, 2, 0, 0, 2, 1, 0],
        ep: [0, 5, 9, 3, 6, 2, 10, 7, 4, 1, 8, 11],
        eo: [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0],
    });

    moves.insert(String::from("r2"), State {
        cc: [3, 4, 2, 0, 1, 5],
        cp: [0, 6, 5, 3, 4, 2, 1, 7],
        co: [0; 8],
        ep: [0, 2, 1, 3, 10, 9, 8, 7, 6, 5, 4, 11],
        eo: [0; 12],
    });

    moves.insert(String::from("r'"), State {
        cc: [4, 0, 2, 1, 3, 5],
        cp: [0, 5, 1, 3, 4, 6, 2, 7],
        co: [0, 1, 2, 0, 0, 2, 1, 0],
        ep: [0, 9, 5, 3, 8, 1, 4, 7, 10, 2, 6, 11],
        eo: [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0],
    });

    moves.insert(String::from("Rw"), State {
        cc: [1, 3, 2, 4, 0, 5],
        cp: [0, 2, 6, 3, 4, 1, 5, 7],
        co: [0, 1, 2, 0, 0, 2, 1, 0],
        ep: [0, 5, 9, 3, 6, 2, 10, 7, 4, 1, 8, 11],
        eo: [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0],
    });

    moves.insert(String::from("Rw2"), State {
        cc: [3, 4, 2, 0, 1, 5],
        cp: [0, 6, 5, 3, 4, 2, 1, 7],
        co: [0; 8],
        ep: [0, 2, 1, 3, 10, 9, 8, 7, 6, 5, 4, 11],
        eo: [0; 12],
    });

    moves.insert(String::from("Rw'"), State {
        cc: [4, 0, 2, 1, 3, 5],
        cp: [0, 5, 1, 3, 4, 6, 2, 7],
        co: [0, 1, 2, 0, 0, 2, 1, 0],
        ep: [0, 9, 5, 3, 8, 1, 4, 7, 10, 2, 6, 11],
        eo: [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0],
    });

    moves.insert(String::from("f"), State {
        cc: [5, 1, 0, 2, 4, 3],
        cp: [0, 1, 3, 7, 4, 5, 2, 6],
        co: [0, 0, 1, 2, 0, 0, 2, 1],
        ep: [0, 1, 6, 10, 4, 7, 3, 11, 8, 5, 2, 9],
        eo: [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1],
    });

    moves.insert(String::from("f2"), State {
        cc: [3, 1, 5, 0, 4, 2],
        cp: [0, 1, 7, 6, 4, 5, 3, 2],
        co: [0; 8],
        ep: [0, 1, 3, 2, 4, 11, 10, 9, 8, 7, 6, 5],
        eo: [0; 12],
    });

    moves.insert(String::from("f'"), State {
        cc: [2, 1, 3, 5, 4, 0],
        cp: [0, 1, 6, 2, 4, 5, 7, 3],
        co: [0, 0, 1, 2, 0, 0, 2, 1],
        ep: [0, 1, 10, 6, 4, 9, 2, 5, 8, 11, 3, 7],
        eo: [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1],
    });

    moves.insert(String::from("Fw"), State {
        cc: [5, 1, 0, 2, 4, 3],
        cp: [0, 1, 3, 7, 4, 5, 2, 6],
        co: [0, 0, 1, 2, 0, 0, 2, 1],
        ep: [0, 1, 6, 10, 4, 7, 3, 11, 8, 5, 2, 9],
        eo: [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1],
    });

    moves.insert(String::from("Fw2"), State {
        cc: [3, 1, 5, 0, 4, 2],
        cp: [0, 1, 7, 6, 4, 5, 3, 2],
        co: [0; 8],
        ep: [0, 1, 3, 2, 4, 11, 10, 9, 8, 7, 6, 5],
        eo: [0; 12],
    });

    moves.insert(String::from("Fw'"), State {
        cc: [2, 1, 3, 5, 4, 0],
        cp: [0, 1, 6, 2, 4, 5, 7, 3],
        co: [0, 0, 1, 2, 0, 0, 2, 1],
        ep: [0, 1, 10, 6, 4, 9, 2, 5, 8, 11, 3, 7],
        eo: [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1],
    });

    moves.insert(String::from("b"), State {
        cc: [2, 1, 3, 5, 4, 0],
        cp: [1, 5, 2, 3, 0, 4, 6, 7],
        co: [1, 2, 0, 0, 2, 1, 0, 0],
        ep: [4, 8, 2, 3, 1, 9, 6, 5, 0, 11, 10, 7],
        eo: [1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1],
    });

    moves.insert(String::from("b2"), State {
        cc: [3, 1, 5, 0, 4, 2],
        cp: [5, 4, 2, 3, 1, 0, 6, 7],
        co: [0; 8],
        ep: [1, 0, 2, 3, 8, 11, 6, 9, 4, 7, 10, 5],
        eo: [0; 12],
    });

    moves.insert(String::from("b'"), State {
        cc: [5, 1, 0, 2, 4, 3],
        cp: [4, 0, 2, 3, 5, 1, 6, 7],
        co: [1, 2, 0, 0, 2, 1, 0, 0],
        ep: [8, 4, 2, 3, 0, 7, 6, 11, 1, 5, 10, 9],
        eo: [1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1],
    });

    moves.insert(String::from("Bw"), State {
        cc: [2, 1, 3, 5, 4, 0],
        cp: [1, 5, 2, 3, 0, 4, 6, 7],
        co: [1, 2, 0, 0, 2, 1, 0, 0],
        ep: [4, 8, 2, 3, 1, 9, 6, 5, 0, 11, 10, 7],
        eo: [1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1],
    });

    moves.insert(String::from("Bw2"), State {
        cc: [3, 1, 5, 0, 4, 2],
        cp: [5, 4, 2, 3, 1, 0, 6, 7],
        co: [0; 8],
        ep: [1, 0, 2, 3, 8, 11, 6, 9, 4, 7, 10, 5],
        eo: [0; 12],
    });

    moves.insert(String::from("Bw'"), State {
        cc: [5, 1, 0, 2, 4, 3],
        cp: [4, 0, 2, 3, 5, 1, 6, 7],
        co: [1, 2, 0, 0, 2, 1, 0, 0],
        ep: [8, 4, 2, 3, 0, 7, 6, 11, 1, 5, 10, 9],
        eo: [1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1],
    });

    moves
}
